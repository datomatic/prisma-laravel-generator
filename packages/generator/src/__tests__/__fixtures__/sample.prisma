datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  role    Role     @default(USER)
  posts   Post[]
  profile Profile?
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model Post {
  id         Int        @id @default(autoincrement())
  title      String
  published  Boolean    @default(false)
  type       PostType
  author     User       @relation(fields: [authorId], references: [id])
  authorId   Int
  categories Category[] @relation(references: [id])
  createdAt  DateTime /// created_at
  updatedAt  DateTime /// updated_at
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[] @relation(references: [id])
}

enum Role {
  USER
  ADMIN
}

enum PostType {
  article  @map("1")
  release  @map("2")
  news     @map("3")
  event    @map("4")
}

enum Enum {
  A
  B
  C
  D
}

enum BackedEnum {
  A  @map("1")
  B  @map("2")
  C  @map("3")
  D  @map("4")
}

model WithEnum {
  id          Int    @id @default(autoincrement())
  enum        Enum
  nullable    Enum?
  array       Enum[]
  defaultEnum Enum   @default(A)
}

model WithBackedEnum {
  id          Int          @id @default(autoincrement())
  enum        BackedEnum
  nullable    BackedEnum?
  array       BackedEnum[]
  defaultEnum BackedEnum   @default(A)
}

model WithArray {
  id      Int   @id @default(autoincrement())
  numbers Int[]
}

model FieldComments {
  id    Int    @id @default(autoincrement()) // Ignored comment
  // Ignored pre-comment
  email String @unique @db.VarChar(100) /// Generator comment

  /// Generator pre-comment
  name String

  /// Both generator pre-comment
  age Int /// and generated comment
}

model WithDbType {
  id    Int    @id @default(autoincrement())
  email String @db.VarChar(100)
}

model NullableField {
  id   Int     @id @default(autoincrement())
  name String?
}

model WithTableMap {
  id Int @id @default(autoincrement())

  @@map("with_table_map")
}

model WithPrimaryKey {
  id Int @id @default(autoincrement())
}

model WithStringPrimaryKey {
  id String @id
}

model WithPrimaryKeyDifferentName {
  primary_id Int @id @default(autoincrement())
}

model WithStringPrimaryKeyDifferentName {
  primary_id String @id
}

model WithGlobalPrimaryKey {
  id Int @default(autoincrement())

  @@id([id])
}

model WithGlobalStringPrimaryKey {
  id String

  @@id([id])
}

model WithGlobalPrimaryKeyDifferentName {
  primary_id Int @default(autoincrement())

  @@id([primary_id])
}

model WithGlobalStringPrimaryKeyDifferentName {
  primary_id String

  @@id([primary_id])
}

model DefaultValues {
  id    Int      @id @default(autoincrement())
  email String   @default("hello@world.test")
  name  String?  @default("N.A.")
  age   Int      @default(18)
  uuid  String   @default(uuid())
  now   DateTime @default(now())
  bool  Boolean  @default(true)
  role  Role     @default(USER)
}

model Timestamps1 {
  id                Int      @id @default(autoincrement())
  created_timestamp DateTime /// created_at
  updated_timestamp DateTime /// updated_at
}

model Timestamps2 {
  id                Int      @id @default(autoincrement())
  created_at        DateTime /// created_at
  updated_timestamp DateTime /// updated_at
}

model Timestamps3 {
  id                Int      @id @default(autoincrement())
  created_timestamp DateTime /// created_at
  updated_at        DateTime /// updated_at
}

model Timestamps4 {
  id         Int      @id @default(autoincrement())
  created_at DateTime /// created_at
  updated_at DateTime /// updated_at
}

model Timestamps5 {
  id         Int      @id @default(autoincrement())
  created_at DateTime /// created_at
  updated_at DateTime @updatedAt
}

model Timestamps6 {
  id                Int      @id @default(autoincrement())
  created_at        DateTime /// created_at
  updated_timestamp DateTime @updatedAt
}

model Timestamps7 {
  id         Int      @id @default(autoincrement())
  created_at DateTime /// created_at
  updated_at DateTime @updatedAt /// updated_at
}

model Timestamps8 {
  id                Int      @id @default(autoincrement())
  created_at        DateTime /// created_at
  updated_timestamp DateTime @updatedAt /// updated_at
}

model Guarded {
  id       Int     @id @default(autoincrement()) /// guarded
  email    String /// guarded
  password String /// guarded
  age      Int     @default(18)
  name     String?
}

model Fillable {
  id       Int     @id @default(autoincrement())
  email    String
  password String
  age      Int     @default(18) /// fillable
  name     String? /// fillable
}

/// mass-assignable
model MassAssignable {
  id       Int     @id @default(autoincrement())
  email    String
  password String
  age      Int     @default(18)
  name     String?
}

model Hidden {
  id       Int     @id @default(autoincrement())
  email    String
  password String /// hidden
  api_key  String /// hidden
  name     String?
}

model Visible {
  id       Int     @id @default(autoincrement())
  email    String /// visible
  password String
  api_key  String
  name     String? /// visible
}

model ReadOnlyField {
  id       Int     @id @default(autoincrement())
  email    String /// read-only
  phone    String /// read-only
  password String
  name     String?
}

model SoftDelete1 {
  id         Int      @id @default(autoincrement())
  email      String
  password   String
  deleted_at DateTime /// deleted_at
}

model SoftDelete2 {
  id                Int      @id @default(autoincrement())
  email             String
  password          String
  deleted_timestamp DateTime /// deleted_at
}

model Unique {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  username String  @unique
  name     String?
}

model MultipleUnique {
  id        Int    @id @default(autoincrement())
  email     String @unique
  firstname String
  lastname  String
  age       Int?

  @@unique([firstname, lastname])
}

model MultipleUnique2 {
  id        Int    @id @default(autoincrement())
  email     String @unique
  firstname String
  lastname  String
  age       Int?

  @@unique([email, firstname, lastname])
}

model Ignore {
  id      Int    @id @default(autoincrement())
  email   String @unique
  interal String @unique @ignore
  age     Int
  ignored Int?   @ignore
}

model MultipleComments {
  id       Int    @id @default(autoincrement())
  password String /// guarded, Hidden  ,  read-only
}

model Types {
  id      Int                    @id @default(autoincrement())
  name    String
  active  Boolean
  age     Int
  seconds BigInt
  blob    Bytes
  speed   Float
  price   Decimal
  birth   DateTime
  schema  Json
  circle  Unsupported("circle")? @default(dbgenerated("'<(10,4),11>'::circle"))
}
