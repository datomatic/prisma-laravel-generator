datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  role    Role     @default(USER)
  posts   Post[]
  profile Profile?
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model Post {
  id         Int        @id @default(autoincrement())
  title      String
  published  Boolean    @default(false)
  type       PostType
  author     User       @relation(fields: [authorId], references: [id])
  authorId   Int
  categories Category[] @relation(references: [id])
  createdAt  DateTime /// created_at
  updatedAt  DateTime /// updated_at
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[] @relation(references: [id])
}

enum Role {
  USER
  ADMIN
}

enum PostType {
  article  @map("1")
  release  @map("2")
  news     @map("3")
  event    @map("4")
}

enum Enum {
  A
  B
  C
  D
}

enum BackedEnum {
  A  @map("1")
  B  @map("2")
  C  @map("3")
  D  @map("4")
}

/// trait:App\Traits\EnumCustomTrait
enum EnumWithTrait {
  A
  B
  C
  D
}

/// trait:App\Traits\EnumCustomTrait
enum BackedEnumWithTrait {
  A  @map("1")
  B  @map("2")
  C  @map("3")
  D  @map("4")
}

/// trait:App\Traits\EnumCustomTrait
/// trait:App\Traits\AnotherCustomTrait
enum EnumWithTwoTraits {
  A  @map("1")
  B  @map("2")
  C  @map("3")
  D  @map("4")
}

/// trait:App\Traits\CustomTrait
model WithTrait {
  id Int @id @default(autoincrement())
}

/// trait:App\Traits\ATrait
/// trait:App\Traits\BTrait
/// trait:App\Traits\CTrait
model WithMultipleTraits {
  id Int @id @default(autoincrement())
}

/// trait:App\Traits\CustomTrait as AliasTrait
model TraitWithAlias {
  id Int @id @default(autoincrement())
}

/// trait:App\Traits\CustomTrait AS AliasTrait
model TraitWithAlias2 {
  id Int @id @default(autoincrement())
}

/// implements:App\Contracts\CustomInterface
model WithInterface {
  id Int @id @default(autoincrement())
}

/// implements:App\Contracts\CustomInterface as AliasInterface
model InterfaceWithAlias {
  id Int @id @default(autoincrement())
}

/// implements:App\Contracts\CustomInterface aS AliasInterface
model InterfaceWithAlias2 {
  id Int @id @default(autoincrement())
}

/// implements:App\Contracts\AInterface
/// implements:App\Contracts\BInterface
/// implements:App\Contracts\CInterface
model WithMultipleInterfaces {
  id Int @id @default(autoincrement())
}

/// extends:App\Models\CustomModel
model WithCustomExtend {
  id Int @id @default(autoincrement())
}

/// extends:App\Models\CustomModel as AliasModel
model ExtendAlias {
  id Int @id @default(autoincrement())
}

/// extends:App\Models\CustomModel As AliasModel
model ExtendAlias2 {
  id Int @id @default(autoincrement())
}

/// extends:App\Models\CustomPivot
/// pivot
model PivotWithCustomExtend {
  id Int @id @default(autoincrement())
}

/// path:./app/Models/custom
model ModelCustomPath {
  id Int @id @default(autoincrement())
}

/// path:./app/Enums/custom
enum EnumCustomPath {
  A  @map("1")
  B  @map("2")
}

model WithEnum {
  id          Int    @id @default(autoincrement())
  enum        Enum
  nullable    Enum?
  array       Enum[]
  defaultEnum Enum   @default(A)
}

model WithBackedEnum {
  id          Int          @id @default(autoincrement())
  enum        BackedEnum
  nullable    BackedEnum?
  array       BackedEnum[]
  defaultEnum BackedEnum   @default(A)
}

model WithArray {
  id      Int   @id @default(autoincrement())
  numbers Int[]
}

model FieldComments {
  id    Int    @id @default(autoincrement()) // Ignored comment
  // Ignored pre-comment
  email String @unique @db.VarChar(100) /// Generator comment

  /// Generator pre-comment
  name String

  /// Both generator pre-comment
  age Int /// and generated comment

  height Int /// only generated comment
}

model FieldMultipleComments {
  id Int @id @default(autoincrement())

  /// Comment 1
  /// Comment 2
  name String /// Comment 3
}

/// mass-assignable
model ModelComments {
  id Int @id @default(autoincrement())
}

/// model comment 1
/// mass-assignable
/// model comment 2
model ModelMultipleComments {
  id Int @id @default(autoincrement())
}

model WithDbType {
  id    Int    @id @default(autoincrement())
  email String @db.VarChar(100)
}

model NullableField {
  id   Int     @id @default(autoincrement())
  name String?
}

model WithTableMap {
  id Int @id @default(autoincrement())

  @@map("with_table_map")
}

model WithPrimaryKey {
  id Int @id @default(autoincrement())
}

model WithStringPrimaryKey {
  id String @id
}

model WithPrimaryKeyDifferentName {
  primary_id Int @id @default(autoincrement())
}

model WithStringPrimaryKeyDifferentName {
  primary_id String @id
}

model WithGlobalPrimaryKey {
  id Int @default(autoincrement())

  @@id([id])
}

model WithGlobalStringPrimaryKey {
  id String

  @@id([id])
}

model WithGlobalPrimaryKeyDifferentName {
  primary_id Int @default(autoincrement())

  @@id([primary_id])
}

model WithGlobalStringPrimaryKeyDifferentName {
  primary_id String

  @@id([primary_id])
}

model DefaultValues {
  id    Int      @id @default(autoincrement())
  email String   @default("hello@world.test")
  name  String?  @default("N.A.")
  age   Int      @default(18)
  uuid  String   @default(uuid())
  now   DateTime @default(now())
  bool  Boolean  @default(true)
  role  Role     @default(USER)
}

model ReadonlyDatetime {
  id       Int      @id @default(autoincrement())
  readonly DateTime /// read-only
  editable DateTime
}

model DefaultValuesWithoutMethodCall {
  id    Int     @id
  email String  @default("hello@world.test")
  name  String? @default("N.A.")
  age   Int     @default(18)
  bool  Boolean @default(true)
}

model Timestamps1 {
  id                Int      @id @default(autoincrement())
  created_timestamp DateTime /// created_at
  updated_timestamp DateTime /// updated_at
}

model Timestamps2 {
  id                Int      @id @default(autoincrement())
  created_at        DateTime /// created_at
  updated_timestamp DateTime /// updated_at
}

model Timestamps3 {
  id                Int      @id @default(autoincrement())
  created_timestamp DateTime /// created_at
  updated_at        DateTime /// updated_at
}

model Timestamps4 {
  id         Int      @id @default(autoincrement())
  created_at DateTime /// created_at
  updated_at DateTime /// updated_at
}

model Timestamps5 {
  id         Int      @id @default(autoincrement())
  created_at DateTime /// created_at
  updated_at DateTime @updatedAt
}

model Timestamps6 {
  id                Int      @id @default(autoincrement())
  created_at        DateTime /// created_at
  updated_timestamp DateTime @updatedAt
}

model Timestamps7 {
  id         Int      @id @default(autoincrement())
  created_at DateTime /// created_at
  updated_at DateTime @updatedAt /// updated_at
}

model Timestamps8 {
  id                Int      @id @default(autoincrement())
  created_at        DateTime /// created_at
  updated_timestamp DateTime @updatedAt /// updated_at
}

model Timestamps9 {
  id         Int      @id @default(autoincrement())
  created_at DateTime
  updated_at DateTime
}

model Timestamps10 {
  id                Int      @id @default(autoincrement())
  created_at        DateTime
  updated_timestamp DateTime /// updated_at
}

model Timestamps11 {
  id                Int      @id @default(autoincrement())
  created_timestamp DateTime /// created_at
  updated_at        DateTime
}

model Guarded {
  id       Int     @id @default(autoincrement()) /// guarded
  email    String /// guarded
  password String /// guarded
  age      Int     @default(18)
  name     String?
}

model Fillable {
  id       Int     @id @default(autoincrement())
  email    String
  password String
  age      Int     @default(18) /// fillable
  name     String? /// fillable
}

/// mass-assignable
model MassAssignable {
  id       Int     @id @default(autoincrement())
  email    String
  password String
  age      Int     @default(18)
  name     String?
}

model Hidden {
  id       Int     @id @default(autoincrement())
  email    String
  password String /// hidden
  api_key  String /// hidden
  name     String?
}

model Visible {
  id       Int     @id @default(autoincrement())
  email    String /// visible
  password String
  api_key  String
  name     String? /// visible
}

model ReadOnlyField {
  id       Int     @id @default(autoincrement())
  email    String /// read-only
  phone    String /// read-only
  password String
  name     String?
}

model SoftDelete1 {
  id         Int      @id @default(autoincrement())
  email      String
  password   String
  deleted_at DateTime /// deleted_at
}

model SoftDelete2 {
  id                Int      @id @default(autoincrement())
  email             String
  password          String
  deleted_timestamp DateTime /// deleted_at
}

model Unique {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  username String  @unique
  name     String?
}

model MultipleUnique {
  id        Int    @id @default(autoincrement())
  email     String @unique
  firstname String
  lastname  String
  age       Int?

  @@unique([firstname, lastname])
}

model MultipleUnique2 {
  id        Int    @id @default(autoincrement())
  email     String @unique
  firstname String
  lastname  String
  age       Int?

  @@unique([email, firstname, lastname])
}

model Ignore {
  id      Int    @id @default(autoincrement())
  email   String @unique
  interal String @unique @ignore
  age     Int
  ignored Int?   @ignore
}

model MultipleComments {
  id       Int    @id @default(autoincrement())
  password String /// guarded, Hidden  ,  read-only
}

model NoPrimaryKey {
  name String @unique()
  age  Int
}

model NoRules {
  name String @unique() @ignore
}

model OneToOneA {
  id      Int        @id @default(autoincrement())
  related OneToOneB?
}

model OneToOneB {
  id        Int       @id @default(autoincrement())
  relatedId Int       @unique
  related   OneToOneA @relation(fields: [relatedId], references: [id])
}

model OneToOneA2 {
  id      Int         @id @default(autoincrement())
  related OneToOneB2?
}

model OneToOneB2 {
  id               Int        @id @default(autoincrement())
  one_to_one_a2_id Int        @unique
  one_to_one_a2    OneToOneA2 @relation(fields: [one_to_one_a2_id], references: [id])
}

model OneToOneA3 {
  id      Int         @id @default(autoincrement())
  otherId Int         @unique
  related OneToOneB3?
}

model OneToOneB3 {
  id         Int        @id @default(autoincrement())
  related_id Int        @unique
  related    OneToOneA3 @relation(fields: [related_id], references: [otherId])
}

model OneToOneA4 {
  id      Int         @id @default(autoincrement())
  related OneToOneB4?
}

model OneToOneB4 {
  id        Int         @id @default(autoincrement())
  relatedId Int?        @unique
  related   OneToOneA4? @relation(fields: [relatedId], references: [id])
}

model OneToOneA5 {
  main_id Int         @unique() @default(autoincrement())
  related OneToOneB5?
}

model OneToOneB5 {
  main_id   Int         @unique() @default(autoincrement())
  relatedId Int?        @unique
  related   OneToOneA5? @relation(fields: [relatedId], references: [main_id])
}

model OneToManyA {
  id      Int          @id @default(autoincrement())
  related OneToManyB[]
}

model OneToManyB {
  id            Int        @id @default(autoincrement())
  relatedId     Int
  one_to_one_a2 OneToManyA @relation(fields: [relatedId], references: [id])
}

model OneToManyA2 {
  id      Int           @id @default(autoincrement())
  related OneToManyB2[]
}

model OneToManyB2 {
  id                Int         @id @default(autoincrement())
  one_to_many_a2_id Int
  one_to_many_a2    OneToManyA2 @relation(fields: [one_to_many_a2_id], references: [id])
}

model OneToManyA3 {
  id      Int           @id @default(autoincrement())
  otherId Int           @unique
  related OneToManyB3[]
}

model OneToManyB3 {
  id        Int         @id @default(autoincrement())
  relatedId Int
  related   OneToManyA3 @relation(fields: [relatedId], references: [otherId])
}

model OneToManyA4 {
  main_id Int           @unique
  related OneToManyB4[]
}

model OneToManyB4 {
  main_id   Int         @unique @default(autoincrement())
  relatedId Int
  related   OneToManyA4 @relation(fields: [main_id], references: [main_id])
}

model ImplicitManyToManyA {
  id      Int                   @id @default(autoincrement())
  related ImplicitManyToManyB[]
}

model ImplicitManyToManyB {
  id      Int                   @id @default(autoincrement())
  related ImplicitManyToManyA[]
}

model ExplicitManyToManyA {
  id      Int                       @id @default(autoincrement())
  related ExplicitManyToManyPivot[]
}

/// pivot
model ExplicitManyToManyPivot {
  id   Int                 @id @default(autoincrement())
  A_id Int
  A    ExplicitManyToManyA @relation(fields: [A_id], references: [id])
  B_id Int
  B    ExplicitManyToManyB @relation(fields: [B_id], references: [id])
}

model ExplicitManyToManyB {
  id      Int                       @id @default(autoincrement())
  related ExplicitManyToManyPivot[]
}

model ExplicitManyToManyA2 {
  id                       Int                        @id @default(autoincrement())
  explicit_many_to_many_b2 ExplicitManyToManyPivot2[]
}

/// pivot
model ExplicitManyToManyPivot2 {
  id                          Int                  @id @default(autoincrement())
  explicit_many_to_many_a2_id Int
  explicit_many_to_many_a2    ExplicitManyToManyA2 @relation(fields: [explicit_many_to_many_a2_id], references: [id])
  explicit_many_to_many_b2_id Int
  explicit_many_to_many_b2    ExplicitManyToManyB2 @relation(fields: [explicit_many_to_many_b2_id], references: [id])
}

model ExplicitManyToManyB2 {
  id                       Int                        @id @default(autoincrement())
  explicit_many_to_many_a2 ExplicitManyToManyPivot2[]
}

model ExplicitManyToManyA3 {
  id       Int                        @id @default(autoincrement())
  otherIdA Int                        @unique
  related  ExplicitManyToManyPivot3[]
}

/// pivot
model ExplicitManyToManyPivot3 {
  id   Int                  @id @default(autoincrement())
  A_id Int
  A    ExplicitManyToManyA3 @relation(fields: [A_id], references: [otherIdA])
  B_id Int
  B    ExplicitManyToManyB3 @relation(fields: [B_id], references: [otherIdB])
}

model ExplicitManyToManyB3 {
  id       Int                        @id @default(autoincrement())
  otherIdB Int                        @unique
  related  ExplicitManyToManyPivot3[]
}

model ExplicitManyToManyA4 {
  id       Int                        @id @default(autoincrement())
  otherIdA Int                        @unique
  related  ExplicitManyToManyPivot4[]
}

/// pivot
model ExplicitManyToManyPivot4 {
  id   Int                  @id @default(autoincrement())
  A_id Int
  A    ExplicitManyToManyA4 @relation(fields: [A_id], references: [otherIdA])
  B_id Int
  B    ExplicitManyToManyB4 @relation(fields: [B_id], references: [otherIdB])

  @@map("explicit_many_to_many_a4_explicit_many_to_many_b4")
}

model ExplicitManyToManyB4 {
  id       Int                        @id @default(autoincrement())
  otherIdB Int                        @unique
  related  ExplicitManyToManyPivot4[]
}

model ExplicitManyToManyA5 {
  id      Int                        @id @default(autoincrement())
  related ExplicitManyToManyPivot5[]
  hasOne  ExplicitManyToManyPivot5?  @relation("hasOne")
}

/// pivot
model ExplicitManyToManyPivot5 {
  id    Int                    @id @default(autoincrement())
  A_id  Int
  A     ExplicitManyToManyA5   @relation(fields: [A_id], references: [id])
  B_id  Int
  B     ExplicitManyToManyB5   @relation(fields: [B_id], references: [id])
  A2_id Int                    @unique
  A2    ExplicitManyToManyA5   @relation("hasOne", fields: [A2_id], references: [id])
  B2    ExplicitManyToManyB5[] @relation("pivot")
}

model ExplicitManyToManyB5 {
  id       Int                        @id @default(autoincrement())
  related  ExplicitManyToManyPivot5[]
  pivot_id Int
  pivot    ExplicitManyToManyPivot5   @relation("pivot", fields: [pivot_id], references: [id])
}

model ExplicitManyToManyA6 {
  key     Int                        @id @default(autoincrement())
  related ExplicitManyToManyPivot6[]
}

/// pivot
model ExplicitManyToManyPivot6 {
  key  Int                  @id @default(autoincrement())
  A_id Int
  A    ExplicitManyToManyA6 @relation(fields: [A_id], references: [key])
  B_id Int
  B    ExplicitManyToManyB6 @relation(fields: [B_id], references: [key])
}

model ExplicitManyToManyB6 {
  key     Int                        @id @default(autoincrement())
  related ExplicitManyToManyPivot6[]
}

model ExplicitManyToManyA7 {
  key     Int                        @unique @default(autoincrement())
  related ExplicitManyToManyPivot7[]
}

/// pivot
model ExplicitManyToManyPivot7 {
  key  Int                  @id @default(autoincrement())
  A_id Int
  A    ExplicitManyToManyA7 @relation(fields: [A_id], references: [key])
  B_id Int
  B    ExplicitManyToManyB7 @relation(fields: [B_id], references: [key])
}

model ExplicitManyToManyB7 {
  key     Int                        @unique @default(autoincrement())
  related ExplicitManyToManyPivot7[]
}

model EagerLoadA {
  id      Int         @id @default(autoincrement())
  related EagerLoadB? /// eager-loaded
}

model EagerLoadB {
  id        Int        @id @default(autoincrement())
  relatedId Int        @unique
  related   EagerLoadA @relation(fields: [relatedId], references: [id]) /// eager-loaded
}

model TouchingA {
  id      Int        @id @default(autoincrement())
  related TouchingB? /// touch
}

model TouchingB {
  id        Int       @id @default(autoincrement())
  relatedId Int       @unique
  related   TouchingA @relation(fields: [relatedId], references: [id]) /// touch
}

model SelfRelation {
  id        Int           @id @default(autoincrement())
  relatedId Int           @unique
  parent    SelfRelation  @relation("one_to_one", fields: [relatedId], references: [id])
  child     SelfRelation? @relation("one_to_one")
}

model MappedId {
  id        Int    @id @default(autoincrement()) @map("primary_id") /// hidden, guarded
  firstname String
}

model Types {
  id      Int      @id @default(autoincrement())
  name    String
  active  Boolean
  age     Int
  seconds BigInt
  blob    Bytes
  speed   Float
  price   Decimal
  birth   DateTime
  schema  Json
}

model snake_cased_models {
  id        Int    @id @default(autoincrement())
  firstname String
}

model UnsupportedTypes {
  id        Int                              @id
  circle    Unsupported("circle")?           @default(dbgenerated("'<(10,4),11>'::circle"))
  square    Unsupported("square()!, hello!") @default(dbgenerated("'<(10,4),11>'::square(), test"))
  triangle  Unsupported("triangle()")
  rectangle Unsupported("rectangle()")[]
}
