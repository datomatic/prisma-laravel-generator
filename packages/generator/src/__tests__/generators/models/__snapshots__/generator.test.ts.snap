// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`models: generation - mongodb: MongoDbNow 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Support\\\\Carbon;

/**
 * MongoDbNow Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read string $_id
 * @property Carbon $created_at
 */
abstract class MongoDbNow extends Model
{
    public $incrementing = false;

    public $timestamps = false;
    protected $table = 'MongoDbNow';

    protected $primaryKey = '_id';

    protected $keyType = 'string';

    protected $attributes = [
        'created_at' => Carbon::now(),
    ];

    protected $rules = [
        '_id' => ['nullable', 'string'],
        'created_at' => ['nullable', 'date'],
    ];

    protected $casts = [
        '_id' => 'string',
        'created_at' => 'immutable_datetime',
    ];
}
"
`;

exports[`models: generation - mysql: UnsignedIntegers 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * UnsignedIntegers Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property int $uint
 * @property int $usmallint
 * @property int $utinyint
 * @property int $ubigint
 */
abstract class UnsignedIntegers extends Model
{
    public $timestamps = false;
    protected $table = 'UnsignedIntegers';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'uint' => ['nullable', 'numeric', 'integer', 'min:0'],
        'usmallint' => ['nullable', 'numeric', 'integer', 'min:0'],
        'utinyint' => ['nullable', 'numeric', 'integer', 'min:0'],
        'ubigint' => ['nullable', 'numeric', 'integer', 'min:0'],
    ];

    protected $casts = [
        'id' => 'integer',
        'uint' => 'integer',
        'usmallint' => 'integer',
        'utinyint' => 'integer',
        'ubigint' => 'integer',
    ];
}
"
`;

exports[`models: generation: Category 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * Category Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property string $name
 * @property-read Collection<Post> $posts
 */
abstract class Category extends Model
{
    public $timestamps = false;
    protected $table = 'Category';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'name' => ['nullable', 'string'],
    ];

    protected $casts = [
        'id' => 'integer',
        'name' => 'string',
    ];

    public function posts()
    {
        return $this->belongsToMany(Post::class, '_CategoryToPost', 'A', 'B');
    }
}
"
`;

exports[`models: generation: DefaultValues 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use App\\\\Enums\\\\Prisma\\\\Role;
use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Support\\\\Carbon;
use Illuminate\\\\Support\\\\Str;
use Illuminate\\\\Validation\\\\Rules\\\\Enum;

/**
 * DefaultValues Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property string  $email
 * @property ?string $name
 * @property int     $age
 * @property string  $uuid
 * @property Carbon  $now
 * @property bool    $bool
 * @property Role    $role
 */
abstract class DefaultValues extends Model
{
    public $timestamps = false;
    protected $table = 'DefaultValues';

    protected $attributes = [
        'email' => 'hello@world.test',
        'name' => 'N.A.',
        'age' => 18,
        'uuid' => Str::orderedUuid(),
        'bool' => true,
        'role' => Role::USER,
    ];

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'email' => ['nullable', 'string'],
        'name' => ['required', 'string'],
        'age' => ['nullable', 'numeric', 'integer'],
        'uuid' => ['nullable', 'string', 'uuid'],
        'now' => ['nullable', 'date'],
        'bool' => ['nullable', 'boolean'],
        'role' => ['nullable', new Enum(Role::class)],
    ];

    protected $casts = [
        'id' => 'integer',
        'email' => 'string',
        'name' => 'string',
        'age' => 'integer',
        'uuid' => 'string',
        'now' => 'immutable_datetime',
        'bool' => 'boolean',
        'role' => Role::class,
    ];
}
"
`;

exports[`models: generation: EagerLoadA 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * EagerLoadA Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property-read null|EagerLoadB $related
 */
abstract class EagerLoadA extends Model
{
    public $timestamps = false;
    protected $table = 'EagerLoadA';

    protected $with = ['related'];

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
    ];

    public function related()
    {
        return $this->hasOne(EagerLoadB::class, 'relatedId');
    }
}
"
`;

exports[`models: generation: EagerLoadB 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * EagerLoadB Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property int $relatedId
 * @property-read EagerLoadA $related
 */
abstract class EagerLoadB extends Model
{
    public $timestamps = false;
    protected $table = 'EagerLoadB';

    protected $with = ['related'];

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'relatedId' => [
            Rule::unique('EagerLoadB', 'relatedId')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'numeric',
            'integer',
        ],
    ];

    protected $casts = [
        'id' => 'integer',
        'relatedId' => 'integer',
    ];

    public function related()
    {
        return $this->belongsTo(EagerLoadA::class, 'relatedId');
    }
}
"
`;

exports[`models: generation: ExplicitManyToManyA 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * ExplicitManyToManyA Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property-read Collection<ExplicitManyToManyB> $related
 */
abstract class ExplicitManyToManyA extends Model
{
    public $timestamps = false;
    protected $table = 'ExplicitManyToManyA';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
    ];

    public function related()
    {
        return $this->belongsToMany(
            ExplicitManyToManyB::class,
            'ExplicitManyToManyPivot',
            'A_id',
            'B_id'
        )->using(ExplicitManyToManyPivot::class);
    }
}
"
`;

exports[`models: generation: ExplicitManyToManyA2 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * ExplicitManyToManyA2 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property-read Collection<ExplicitManyToManyB2> $explicit_many_to_many_b2
 */
abstract class ExplicitManyToManyA2 extends Model
{
    public $timestamps = false;
    protected $table = 'ExplicitManyToManyA2';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
    ];

    public function explicit_many_to_many_b2()
    {
        return $this->belongsToMany(
            ExplicitManyToManyB2::class,
            'ExplicitManyToManyPivot2'
        )->using(ExplicitManyToManyPivot2::class);
    }
}
"
`;

exports[`models: generation: ExplicitManyToManyA3 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * ExplicitManyToManyA3 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property int $otherIdA
 * @property-read Collection<ExplicitManyToManyB3> $related
 */
abstract class ExplicitManyToManyA3 extends Model
{
    public $timestamps = false;
    protected $table = 'ExplicitManyToManyA3';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'otherIdA' => [
            Rule::unique('ExplicitManyToManyA3', 'otherIdA')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'numeric',
            'integer',
        ],
    ];

    protected $casts = [
        'id' => 'integer',
        'otherIdA' => 'integer',
    ];

    public function related()
    {
        return $this->belongsToMany(
            ExplicitManyToManyB3::class,
            'ExplicitManyToManyPivot3',
            'A_id',
            'B_id',
            'otherIdA',
            'otherIdB'
        )->using(ExplicitManyToManyPivot3::class);
    }
}
"
`;

exports[`models: generation: ExplicitManyToManyA4 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * ExplicitManyToManyA4 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property int $otherIdA
 * @property-read Collection<ExplicitManyToManyB4> $related
 */
abstract class ExplicitManyToManyA4 extends Model
{
    public $timestamps = false;
    protected $table = 'ExplicitManyToManyA4';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'otherIdA' => [
            Rule::unique('ExplicitManyToManyA4', 'otherIdA')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'numeric',
            'integer',
        ],
    ];

    protected $casts = [
        'id' => 'integer',
        'otherIdA' => 'integer',
    ];

    public function related()
    {
        return $this->belongsToMany(
            ExplicitManyToManyB4::class,
            null,
            'A_id',
            'B_id',
            'otherIdA',
            'otherIdB'
        )->using(ExplicitManyToManyPivot4::class);
    }
}
"
`;

exports[`models: generation: ExplicitManyToManyA5 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * ExplicitManyToManyA5 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property-read null|ExplicitManyToManyPivot5 $hasOne
 * @property-read Collection<ExplicitManyToManyB5> $related
 */
abstract class ExplicitManyToManyA5 extends Model
{
    public $timestamps = false;
    protected $table = 'ExplicitManyToManyA5';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
    ];

    public function hasOne()
    {
        return $this->hasOne(ExplicitManyToManyPivot5::class, 'A2_id');
    }

    public function related()
    {
        return $this->belongsToMany(
            ExplicitManyToManyB5::class,
            'ExplicitManyToManyPivot5',
            'A_id',
            'B_id'
        )->using(ExplicitManyToManyPivot5::class);
    }
}
"
`;

exports[`models: generation: ExplicitManyToManyA6 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * ExplicitManyToManyA6 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $key
 * @property-read Collection<ExplicitManyToManyB6> $related
 */
abstract class ExplicitManyToManyA6 extends Model
{
    public $timestamps = false;
    protected $table = 'ExplicitManyToManyA6';

    protected $primaryKey = 'key';

    protected $rules = [
        'key' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'key' => 'integer',
    ];

    public function related()
    {
        return $this->belongsToMany(
            ExplicitManyToManyB6::class,
            'ExplicitManyToManyPivot6',
            'A_id',
            'B_id'
        )->using(ExplicitManyToManyPivot6::class);
    }
}
"
`;

exports[`models: generation: ExplicitManyToManyA7 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * ExplicitManyToManyA7 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property int $key
 * @property-read Collection<ExplicitManyToManyB7> $related
 */
abstract class ExplicitManyToManyA7 extends Model
{
    public $timestamps = false;
    protected $table = 'ExplicitManyToManyA7';

    protected $rules = [
        'key' => [
            Rule::unique('ExplicitManyToManyA7', 'key')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'numeric',
            'integer',
        ],
    ];

    protected $casts = [
        'key' => 'integer',
    ];

    public function related()
    {
        return $this->belongsToMany(
            ExplicitManyToManyB7::class,
            'ExplicitManyToManyPivot7',
            'A_id',
            'B_id',
            'key',
            'key'
        )->using(ExplicitManyToManyPivot7::class);
    }
}
"
`;

exports[`models: generation: ExplicitManyToManyB 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * ExplicitManyToManyB Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property-read Collection<ExplicitManyToManyA> $related
 */
abstract class ExplicitManyToManyB extends Model
{
    public $timestamps = false;
    protected $table = 'ExplicitManyToManyB';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
    ];

    public function related()
    {
        return $this->belongsToMany(
            ExplicitManyToManyA::class,
            'ExplicitManyToManyPivot',
            'B_id',
            'A_id'
        )->using(ExplicitManyToManyPivot::class);
    }
}
"
`;

exports[`models: generation: ExplicitManyToManyB2 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * ExplicitManyToManyB2 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property-read Collection<ExplicitManyToManyA2> $explicit_many_to_many_a2
 */
abstract class ExplicitManyToManyB2 extends Model
{
    public $timestamps = false;
    protected $table = 'ExplicitManyToManyB2';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
    ];

    public function explicit_many_to_many_a2()
    {
        return $this->belongsToMany(
            ExplicitManyToManyA2::class,
            'ExplicitManyToManyPivot2'
        )->using(ExplicitManyToManyPivot2::class);
    }
}
"
`;

exports[`models: generation: ExplicitManyToManyB3 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * ExplicitManyToManyB3 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property int $otherIdB
 * @property-read Collection<ExplicitManyToManyA3> $related
 */
abstract class ExplicitManyToManyB3 extends Model
{
    public $timestamps = false;
    protected $table = 'ExplicitManyToManyB3';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'otherIdB' => [
            Rule::unique('ExplicitManyToManyB3', 'otherIdB')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'numeric',
            'integer',
        ],
    ];

    protected $casts = [
        'id' => 'integer',
        'otherIdB' => 'integer',
    ];

    public function related()
    {
        return $this->belongsToMany(
            ExplicitManyToManyA3::class,
            'ExplicitManyToManyPivot3',
            'B_id',
            'A_id',
            'otherIdB',
            'otherIdA'
        )->using(ExplicitManyToManyPivot3::class);
    }
}
"
`;

exports[`models: generation: ExplicitManyToManyB4 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * ExplicitManyToManyB4 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property int $otherIdB
 * @property-read Collection<ExplicitManyToManyA4> $related
 */
abstract class ExplicitManyToManyB4 extends Model
{
    public $timestamps = false;
    protected $table = 'ExplicitManyToManyB4';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'otherIdB' => [
            Rule::unique('ExplicitManyToManyB4', 'otherIdB')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'numeric',
            'integer',
        ],
    ];

    protected $casts = [
        'id' => 'integer',
        'otherIdB' => 'integer',
    ];

    public function related()
    {
        return $this->belongsToMany(
            ExplicitManyToManyA4::class,
            null,
            'B_id',
            'A_id',
            'otherIdB',
            'otherIdA'
        )->using(ExplicitManyToManyPivot4::class);
    }
}
"
`;

exports[`models: generation: ExplicitManyToManyB5 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * ExplicitManyToManyB5 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property int $pivot_id
 * @property-read ExplicitManyToManyPivot5 $pivot
 * @property-read Collection<ExplicitManyToManyA5> $related
 */
abstract class ExplicitManyToManyB5 extends Model
{
    public $timestamps = false;
    protected $table = 'ExplicitManyToManyB5';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'pivot_id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
        'pivot_id' => 'integer',
    ];

    public function pivot()
    {
        return $this->belongsTo(ExplicitManyToManyPivot5::class);
    }

    public function related()
    {
        return $this->belongsToMany(
            ExplicitManyToManyA5::class,
            'ExplicitManyToManyPivot5',
            'B_id',
            'A_id'
        )->using(ExplicitManyToManyPivot5::class);
    }
}
"
`;

exports[`models: generation: ExplicitManyToManyB6 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * ExplicitManyToManyB6 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $key
 * @property-read Collection<ExplicitManyToManyA6> $related
 */
abstract class ExplicitManyToManyB6 extends Model
{
    public $timestamps = false;
    protected $table = 'ExplicitManyToManyB6';

    protected $primaryKey = 'key';

    protected $rules = [
        'key' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'key' => 'integer',
    ];

    public function related()
    {
        return $this->belongsToMany(
            ExplicitManyToManyA6::class,
            'ExplicitManyToManyPivot6',
            'B_id',
            'A_id'
        )->using(ExplicitManyToManyPivot6::class);
    }
}
"
`;

exports[`models: generation: ExplicitManyToManyB7 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * ExplicitManyToManyB7 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property int $key
 * @property-read Collection<ExplicitManyToManyA7> $related
 */
abstract class ExplicitManyToManyB7 extends Model
{
    public $timestamps = false;
    protected $table = 'ExplicitManyToManyB7';

    protected $rules = [
        'key' => [
            Rule::unique('ExplicitManyToManyB7', 'key')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'numeric',
            'integer',
        ],
    ];

    protected $casts = [
        'key' => 'integer',
    ];

    public function related()
    {
        return $this->belongsToMany(
            ExplicitManyToManyA7::class,
            'ExplicitManyToManyPivot7',
            'B_id',
            'A_id',
            'key',
            'key'
        )->using(ExplicitManyToManyPivot7::class);
    }
}
"
`;

exports[`models: generation: ExplicitManyToManyPivot 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\Pivot;

/**
 * ExplicitManyToManyPivot Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property int $id
 * @property int $A_id
 * @property int $B_id
 */
abstract class ExplicitManyToManyPivot extends Pivot
{
    public $incrementing = true;

    public $timestamps = false;
    protected $table = 'ExplicitManyToManyPivot';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'A_id' => ['nullable', 'numeric', 'integer'],
        'B_id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
        'A_id' => 'integer',
        'B_id' => 'integer',
    ];
}
"
`;

exports[`models: generation: ExplicitManyToManyPivot2 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\Pivot;

/**
 * ExplicitManyToManyPivot2 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property int $id
 * @property int $explicit_many_to_many_a2_id
 * @property int $explicit_many_to_many_b2_id
 */
abstract class ExplicitManyToManyPivot2 extends Pivot
{
    public $incrementing = true;

    public $timestamps = false;
    protected $table = 'ExplicitManyToManyPivot2';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'explicit_many_to_many_a2_id' => ['nullable', 'numeric', 'integer'],
        'explicit_many_to_many_b2_id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
        'explicit_many_to_many_a2_id' => 'integer',
        'explicit_many_to_many_b2_id' => 'integer',
    ];
}
"
`;

exports[`models: generation: ExplicitManyToManyPivot3 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\Pivot;

/**
 * ExplicitManyToManyPivot3 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property int $id
 * @property int $A_id
 * @property int $B_id
 */
abstract class ExplicitManyToManyPivot3 extends Pivot
{
    public $incrementing = true;

    public $timestamps = false;
    protected $table = 'ExplicitManyToManyPivot3';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'A_id' => ['nullable', 'numeric', 'integer'],
        'B_id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
        'A_id' => 'integer',
        'B_id' => 'integer',
    ];
}
"
`;

exports[`models: generation: ExplicitManyToManyPivot4 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\Pivot;

/**
 * ExplicitManyToManyPivot4 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property int $id
 * @property int $A_id
 * @property int $B_id
 */
abstract class ExplicitManyToManyPivot4 extends Pivot
{
    public $incrementing = true;

    public $timestamps = false;
    protected $table = 'explicit_many_to_many_a4_explicit_many_to_many_b4';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'A_id' => ['nullable', 'numeric', 'integer'],
        'B_id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
        'A_id' => 'integer',
        'B_id' => 'integer',
    ];
}
"
`;

exports[`models: generation: ExplicitManyToManyPivot5 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\Pivot;
use Illuminate\\\\Validation\\\\Rule;

/**
 * ExplicitManyToManyPivot5 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property int $id
 * @property int $A_id
 * @property int $B_id
 * @property int $A2_id
 */
abstract class ExplicitManyToManyPivot5 extends Pivot
{
    public $incrementing = true;

    public $timestamps = false;
    protected $table = 'ExplicitManyToManyPivot5';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'A_id' => ['nullable', 'numeric', 'integer'],
        'B_id' => ['nullable', 'numeric', 'integer'],
        'A2_id' => [
            Rule::unique('ExplicitManyToManyPivot5', 'A2_id')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'numeric',
            'integer',
        ],
    ];

    protected $casts = [
        'id' => 'integer',
        'A_id' => 'integer',
        'B_id' => 'integer',
        'A2_id' => 'integer',
    ];
}
"
`;

exports[`models: generation: ExplicitManyToManyPivot6 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\Pivot;

/**
 * ExplicitManyToManyPivot6 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property int $key
 * @property int $A_id
 * @property int $B_id
 */
abstract class ExplicitManyToManyPivot6 extends Pivot
{
    public $incrementing = true;

    public $timestamps = false;
    protected $table = 'ExplicitManyToManyPivot6';

    protected $primaryKey = 'key';

    protected $rules = [
        'key' => ['nullable', 'numeric', 'integer'],
        'A_id' => ['nullable', 'numeric', 'integer'],
        'B_id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'key' => 'integer',
        'A_id' => 'integer',
        'B_id' => 'integer',
    ];
}
"
`;

exports[`models: generation: ExplicitManyToManyPivot7 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\Pivot;

/**
 * ExplicitManyToManyPivot7 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property int $key
 * @property int $A_id
 * @property int $B_id
 */
abstract class ExplicitManyToManyPivot7 extends Pivot
{
    public $incrementing = true;

    public $timestamps = false;
    protected $table = 'ExplicitManyToManyPivot7';

    protected $primaryKey = 'key';

    protected $rules = [
        'key' => ['nullable', 'numeric', 'integer'],
        'A_id' => ['nullable', 'numeric', 'integer'],
        'B_id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'key' => 'integer',
        'A_id' => 'integer',
        'B_id' => 'integer',
    ];
}
"
`;

exports[`models: generation: FieldComments 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * FieldComments Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property string $email
 * @property string $name
 * @property int    $age
 * @property int    $height
 */
abstract class FieldComments extends Model
{
    public $timestamps = false;
    protected $table = 'FieldComments';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'email' => [
            Rule::unique('FieldComments', 'email')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'string',
        ],
        'name' => ['nullable', 'string'],
        'age' => ['nullable', 'numeric', 'integer'],
        'height' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
        'email' => 'string',
        'name' => 'string',
        'age' => 'integer',
        'height' => 'integer',
    ];
}
"
`;

exports[`models: generation: FieldMultipleComments 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * FieldMultipleComments Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property string $name
 */
abstract class FieldMultipleComments extends Model
{
    public $timestamps = false;
    protected $table = 'FieldMultipleComments';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'name' => ['nullable', 'string'],
    ];

    protected $casts = [
        'id' => 'integer',
        'name' => 'string',
    ];
}
"
`;

exports[`models: generation: Fillable 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * Fillable Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property string  $email
 * @property string  $password
 * @property int     $age
 * @property ?string $name
 */
abstract class Fillable extends Model
{
    public $timestamps = false;
    protected $table = 'Fillable';

    protected $attributes = [
        'age' => 18,
    ];

    protected $fillable = ['age', 'name'];

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'email' => ['nullable', 'string'],
        'password' => ['nullable', 'string'],
        'age' => ['nullable', 'numeric', 'integer'],
        'name' => ['required', 'string'],
    ];

    protected $casts = [
        'id' => 'integer',
        'email' => 'string',
        'password' => 'string',
        'age' => 'integer',
        'name' => 'string',
    ];
}
"
`;

exports[`models: generation: Guarded 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * Guarded Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property string  $email
 * @property string  $password
 * @property int     $age
 * @property ?string $name
 */
abstract class Guarded extends Model
{
    public $timestamps = false;
    protected $table = 'Guarded';

    protected $attributes = [
        'age' => 18,
    ];

    protected $guarded = ['id', 'email', 'password'];

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'email' => ['nullable', 'string'],
        'password' => ['nullable', 'string'],
        'age' => ['nullable', 'numeric', 'integer'],
        'name' => ['required', 'string'],
    ];

    protected $casts = [
        'id' => 'integer',
        'email' => 'string',
        'password' => 'string',
        'age' => 'integer',
        'name' => 'string',
    ];
}
"
`;

exports[`models: generation: Hidden 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * Hidden Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property string  $email
 * @property string  $password
 * @property string  $api_key
 * @property ?string $name
 */
abstract class Hidden extends Model
{
    public $timestamps = false;
    protected $table = 'Hidden';

    protected $hidden = ['password', 'api_key'];

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'email' => ['nullable', 'string'],
        'password' => ['nullable', 'string'],
        'api_key' => ['nullable', 'string'],
        'name' => ['required', 'string'],
    ];

    protected $casts = [
        'id' => 'integer',
        'email' => 'string',
        'password' => 'string',
        'api_key' => 'string',
        'name' => 'string',
    ];
}
"
`;

exports[`models: generation: Ignore 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * Ignore Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property string $email
 * @property int    $age
 */
abstract class Ignore extends Model
{
    public $timestamps = false;
    protected $table = 'Ignore';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'email' => [
            Rule::unique('Ignore', 'email')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'string',
        ],
        'age' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
        'email' => 'string',
        'age' => 'integer',
    ];
}
"
`;

exports[`models: generation: ImplicitManyToManyA 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * ImplicitManyToManyA Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property-read Collection<ImplicitManyToManyB> $related
 */
abstract class ImplicitManyToManyA extends Model
{
    public $timestamps = false;
    protected $table = 'ImplicitManyToManyA';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
    ];

    public function related()
    {
        return $this->belongsToMany(
            ImplicitManyToManyB::class,
            '_ImplicitManyToManyAToImplicitManyToManyB',
            'A',
            'B'
        );
    }
}
"
`;

exports[`models: generation: ImplicitManyToManyB 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * ImplicitManyToManyB Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property-read Collection<ImplicitManyToManyA> $related
 */
abstract class ImplicitManyToManyB extends Model
{
    public $timestamps = false;
    protected $table = 'ImplicitManyToManyB';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
    ];

    public function related()
    {
        return $this->belongsToMany(
            ImplicitManyToManyA::class,
            '_ImplicitManyToManyAToImplicitManyToManyB',
            'B',
            'A'
        );
    }
}
"
`;

exports[`models: generation: MappedId 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * MappedId Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $primary_id
 * @property string $firstname
 */
abstract class MappedId extends Model
{
    public $timestamps = false;
    protected $table = 'MappedId';

    protected $primaryKey = 'primary_id';

    protected $guarded = ['primary_id'];

    protected $hidden = ['primary_id'];

    protected $rules = [
        'primary_id' => ['nullable', 'numeric', 'integer'],
        'firstname' => ['nullable', 'string'],
    ];

    protected $casts = [
        'primary_id' => 'integer',
        'firstname' => 'string',
    ];
}
"
`;

exports[`models: generation: MassAssignable 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * MassAssignable Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property int     $id
 * @property string  $email
 * @property string  $password
 * @property int     $age
 * @property ?string $name
 */
abstract class MassAssignable extends Model
{
    public $timestamps = false;
    protected $table = 'MassAssignable';

    protected $attributes = [
        'age' => 18,
    ];

    protected $guarded = [];

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'email' => ['nullable', 'string'],
        'password' => ['nullable', 'string'],
        'age' => ['nullable', 'numeric', 'integer'],
        'name' => ['required', 'string'],
    ];

    protected $casts = [
        'id' => 'integer',
        'email' => 'string',
        'password' => 'string',
        'age' => 'integer',
        'name' => 'string',
    ];
}
"
`;

exports[`models: generation: ModelComments 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * ModelComments Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property int $id
 */
abstract class ModelComments extends Model
{
    public $timestamps = false;
    protected $table = 'ModelComments';

    protected $guarded = [];

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
    ];
}
"
`;

exports[`models: generation: ModelMultipleComments 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * ModelMultipleComments Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property int $id
 */
abstract class ModelMultipleComments extends Model
{
    public $timestamps = false;
    protected $table = 'ModelMultipleComments';

    protected $guarded = [];

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
    ];
}
"
`;

exports[`models: generation: MultipleComments 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * MultipleComments Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property int $id
 * @property-read string $password
 */
abstract class MultipleComments extends Model
{
    public $timestamps = false;
    protected $table = 'MultipleComments';

    protected $guarded = ['password'];

    protected $hidden = ['password'];

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'password' => ['nullable', 'string'],
    ];

    protected $casts = [
        'id' => 'integer',
        'password' => 'string',
    ];
}
"
`;

exports[`models: generation: MultipleUnique 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * MultipleUnique Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property string $email
 * @property string $firstname
 * @property string $lastname
 * @property ?int   $age
 */
abstract class MultipleUnique extends Model
{
    public $timestamps = false;
    protected $table = 'MultipleUnique';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'email' => [
            Rule::unique('MultipleUnique', 'email')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'string',
        ],
        'firstname' => [
            Rule::unique('MultipleUnique', 'firstname')
                ->ignore($this->getKey(), $this->getKeyName())
                ->where(
                    fn ($query) => $query->where('lastname', $this->lastname)
                ),
            'nullable',
            'string',
        ],
        'lastname' => ['nullable', 'string'],
        'age' => ['required', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
        'email' => 'string',
        'firstname' => 'string',
        'lastname' => 'string',
        'age' => 'integer',
    ];
}
"
`;

exports[`models: generation: MultipleUnique2 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * MultipleUnique2 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property string $email
 * @property string $firstname
 * @property string $lastname
 * @property ?int   $age
 */
abstract class MultipleUnique2 extends Model
{
    public $timestamps = false;
    protected $table = 'MultipleUnique2';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'email' => [
            Rule::unique('MultipleUnique2', 'email')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            Rule::unique('MultipleUnique2', 'email')
                ->ignore($this->getKey(), $this->getKeyName())
                ->where(
                    fn ($query) => $query
                        ->where('firstname', $this->firstname)
                        ->where('lastname', $this->lastname)
                ),
            'nullable',
            'string',
        ],
        'firstname' => ['nullable', 'string'],
        'lastname' => ['nullable', 'string'],
        'age' => ['required', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
        'email' => 'string',
        'firstname' => 'string',
        'lastname' => 'string',
        'age' => 'integer',
    ];
}
"
`;

exports[`models: generation: NoPrimaryKey 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * NoPrimaryKey Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property string $name
 * @property int    $age
 */
abstract class NoPrimaryKey extends Model
{
    public $timestamps = false;
    protected $table = 'NoPrimaryKey';

    protected $rules = [
        'name' => [
            Rule::unique('NoPrimaryKey', 'name')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'string',
        ],
        'age' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'name' => 'string',
        'age' => 'integer',
    ];
}
"
`;

exports[`models: generation: NoRules 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * NoRules Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 */
abstract class NoRules extends Model
{
    public $timestamps = false;
    protected $table = 'NoRules';
}
"
`;

exports[`models: generation: NullableField 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * NullableField Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property ?string $name
 */
abstract class NullableField extends Model
{
    public $timestamps = false;
    protected $table = 'NullableField';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'name' => ['required', 'string'],
    ];

    protected $casts = [
        'id' => 'integer',
        'name' => 'string',
    ];
}
"
`;

exports[`models: generation: OneToManyA 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * OneToManyA Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property-read Collection<OneToManyB> $related
 */
abstract class OneToManyA extends Model
{
    public $timestamps = false;
    protected $table = 'OneToManyA';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
    ];

    public function related()
    {
        return $this->hasMany(OneToManyB::class, 'relatedId');
    }
}
"
`;

exports[`models: generation: OneToManyA2 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * OneToManyA2 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property-read Collection<OneToManyB2> $related
 */
abstract class OneToManyA2 extends Model
{
    public $timestamps = false;
    protected $table = 'OneToManyA2';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
    ];

    public function related()
    {
        return $this->hasMany(OneToManyB2::class);
    }
}
"
`;

exports[`models: generation: OneToManyA3 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * OneToManyA3 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property int $otherId
 * @property-read Collection<OneToManyB3> $related
 */
abstract class OneToManyA3 extends Model
{
    public $timestamps = false;
    protected $table = 'OneToManyA3';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'otherId' => [
            Rule::unique('OneToManyA3', 'otherId')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'numeric',
            'integer',
        ],
    ];

    protected $casts = [
        'id' => 'integer',
        'otherId' => 'integer',
    ];

    public function related()
    {
        return $this->hasMany(OneToManyB3::class, 'relatedId', 'otherId');
    }
}
"
`;

exports[`models: generation: OneToManyA4 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * OneToManyA4 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property int $main_id
 * @property-read Collection<OneToManyB4> $related
 */
abstract class OneToManyA4 extends Model
{
    public $timestamps = false;
    protected $table = 'OneToManyA4';

    protected $rules = [
        'main_id' => [
            Rule::unique('OneToManyA4', 'main_id')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'numeric',
            'integer',
        ],
    ];

    protected $casts = [
        'main_id' => 'integer',
    ];

    public function related()
    {
        return $this->hasMany(OneToManyB4::class, 'main_id', 'main_id');
    }
}
"
`;

exports[`models: generation: OneToManyB 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * OneToManyB Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property int $relatedId
 * @property-read OneToManyA $one_to_one_a2
 */
abstract class OneToManyB extends Model
{
    public $timestamps = false;
    protected $table = 'OneToManyB';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'relatedId' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
        'relatedId' => 'integer',
    ];

    public function one_to_one_a2()
    {
        return $this->belongsTo(OneToManyA::class, 'relatedId');
    }
}
"
`;

exports[`models: generation: OneToManyB2 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * OneToManyB2 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property int $one_to_many_a2_id
 * @property-read OneToManyA2 $one_to_many_a2
 */
abstract class OneToManyB2 extends Model
{
    public $timestamps = false;
    protected $table = 'OneToManyB2';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'one_to_many_a2_id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
        'one_to_many_a2_id' => 'integer',
    ];

    public function one_to_many_a2()
    {
        return $this->belongsTo(OneToManyA2::class);
    }
}
"
`;

exports[`models: generation: OneToManyB3 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * OneToManyB3 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property int $relatedId
 * @property-read OneToManyA3 $related
 */
abstract class OneToManyB3 extends Model
{
    public $timestamps = false;
    protected $table = 'OneToManyB3';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'relatedId' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
        'relatedId' => 'integer',
    ];

    public function related()
    {
        return $this->belongsTo(OneToManyA3::class, 'relatedId', 'otherId');
    }
}
"
`;

exports[`models: generation: OneToManyB4 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * OneToManyB4 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property int $main_id
 * @property int $relatedId
 * @property-read OneToManyA4 $related
 */
abstract class OneToManyB4 extends Model
{
    public $timestamps = false;
    protected $table = 'OneToManyB4';

    protected $rules = [
        'main_id' => [
            Rule::unique('OneToManyB4', 'main_id')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'numeric',
            'integer',
        ],
        'relatedId' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'main_id' => 'integer',
        'relatedId' => 'integer',
    ];

    public function related()
    {
        return $this->belongsTo(OneToManyA4::class, 'main_id', 'main_id');
    }
}
"
`;

exports[`models: generation: OneToOneA 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * OneToOneA Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property-read null|OneToOneB $related
 */
abstract class OneToOneA extends Model
{
    public $timestamps = false;
    protected $table = 'OneToOneA';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
    ];

    public function related()
    {
        return $this->hasOne(OneToOneB::class, 'relatedId');
    }
}
"
`;

exports[`models: generation: OneToOneA2 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * OneToOneA2 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property-read null|OneToOneB2 $related
 */
abstract class OneToOneA2 extends Model
{
    public $timestamps = false;
    protected $table = 'OneToOneA2';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
    ];

    public function related()
    {
        return $this->hasOne(OneToOneB2::class);
    }
}
"
`;

exports[`models: generation: OneToOneA3 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * OneToOneA3 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property int $otherId
 * @property-read null|OneToOneB3 $related
 */
abstract class OneToOneA3 extends Model
{
    public $timestamps = false;
    protected $table = 'OneToOneA3';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'otherId' => [
            Rule::unique('OneToOneA3', 'otherId')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'numeric',
            'integer',
        ],
    ];

    protected $casts = [
        'id' => 'integer',
        'otherId' => 'integer',
    ];

    public function related()
    {
        return $this->hasOne(OneToOneB3::class, 'related_id', 'otherId');
    }
}
"
`;

exports[`models: generation: OneToOneA4 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * OneToOneA4 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property-read null|OneToOneB4 $related
 */
abstract class OneToOneA4 extends Model
{
    public $timestamps = false;
    protected $table = 'OneToOneA4';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
    ];

    public function related()
    {
        return $this->hasOne(OneToOneB4::class, 'relatedId');
    }
}
"
`;

exports[`models: generation: OneToOneA5 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * OneToOneA5 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property int $main_id
 * @property-read null|OneToOneB5 $related
 */
abstract class OneToOneA5 extends Model
{
    public $timestamps = false;
    protected $table = 'OneToOneA5';

    protected $rules = [
        'main_id' => [
            Rule::unique('OneToOneA5', 'main_id')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'numeric',
            'integer',
        ],
    ];

    protected $casts = [
        'main_id' => 'integer',
    ];

    public function related()
    {
        return $this->hasOne(OneToOneB5::class, 'relatedId', 'main_id');
    }
}
"
`;

exports[`models: generation: OneToOneB 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * OneToOneB Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property int $relatedId
 * @property-read OneToOneA $related
 */
abstract class OneToOneB extends Model
{
    public $timestamps = false;
    protected $table = 'OneToOneB';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'relatedId' => [
            Rule::unique('OneToOneB', 'relatedId')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'numeric',
            'integer',
        ],
    ];

    protected $casts = [
        'id' => 'integer',
        'relatedId' => 'integer',
    ];

    public function related()
    {
        return $this->belongsTo(OneToOneA::class, 'relatedId');
    }
}
"
`;

exports[`models: generation: OneToOneB2 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * OneToOneB2 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property int $one_to_one_a2_id
 * @property-read OneToOneA2 $one_to_one_a2
 */
abstract class OneToOneB2 extends Model
{
    public $timestamps = false;
    protected $table = 'OneToOneB2';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'one_to_one_a2_id' => [
            Rule::unique('OneToOneB2', 'one_to_one_a2_id')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'numeric',
            'integer',
        ],
    ];

    protected $casts = [
        'id' => 'integer',
        'one_to_one_a2_id' => 'integer',
    ];

    public function one_to_one_a2()
    {
        return $this->belongsTo(OneToOneA2::class);
    }
}
"
`;

exports[`models: generation: OneToOneB3 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * OneToOneB3 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property int $related_id
 * @property-read OneToOneA3 $related
 */
abstract class OneToOneB3 extends Model
{
    public $timestamps = false;
    protected $table = 'OneToOneB3';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'related_id' => [
            Rule::unique('OneToOneB3', 'related_id')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'numeric',
            'integer',
        ],
    ];

    protected $casts = [
        'id' => 'integer',
        'related_id' => 'integer',
    ];

    public function related()
    {
        return $this->belongsTo(OneToOneA3::class, 'related_id', 'otherId');
    }
}
"
`;

exports[`models: generation: OneToOneB4 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * OneToOneB4 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property ?int $relatedId
 * @property-read null|OneToOneA4 $related
 */
abstract class OneToOneB4 extends Model
{
    public $timestamps = false;
    protected $table = 'OneToOneB4';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'relatedId' => [
            Rule::unique('OneToOneB4', 'relatedId')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'required',
            'numeric',
            'integer',
        ],
    ];

    protected $casts = [
        'id' => 'integer',
        'relatedId' => 'integer',
    ];

    public function related()
    {
        return $this->belongsTo(OneToOneA4::class, 'relatedId');
    }
}
"
`;

exports[`models: generation: OneToOneB5 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * OneToOneB5 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property int  $main_id
 * @property ?int $relatedId
 * @property-read null|OneToOneA5 $related
 */
abstract class OneToOneB5 extends Model
{
    public $timestamps = false;
    protected $table = 'OneToOneB5';

    protected $rules = [
        'main_id' => [
            Rule::unique('OneToOneB5', 'main_id')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'numeric',
            'integer',
        ],
        'relatedId' => [
            Rule::unique('OneToOneB5', 'relatedId')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'required',
            'numeric',
            'integer',
        ],
    ];

    protected $casts = [
        'main_id' => 'integer',
        'relatedId' => 'integer',
    ];

    public function related()
    {
        return $this->belongsTo(OneToOneA5::class, 'relatedId', 'main_id');
    }
}
"
`;

exports[`models: generation: Post 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use App\\\\Enums\\\\Prisma\\\\PostType;
use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Support\\\\Carbon;
use Illuminate\\\\Validation\\\\Rules\\\\Enum;

/**
 * Post Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property string   $title
 * @property bool     $published
 * @property PostType $type
 * @property int      $authorId
 * @property Carbon   $createdAt
 * @property Carbon   $updatedAt
 * @property-read User $author
 * @property-read Collection<Category> $categories
 */
abstract class Post extends Model
{
    public const CREATED_AT = 'createdAt';
    public const UPDATED_AT = 'updatedAt';
    protected $table = 'Post';

    protected $attributes = [
        'published' => false,
    ];

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'title' => ['nullable', 'string'],
        'published' => ['nullable', 'boolean'],
        'type' => ['nullable', new Enum(PostType::class)],
        'authorId' => ['nullable', 'numeric', 'integer'],
        'createdAt' => ['nullable', 'date'],
        'updatedAt' => ['nullable', 'date'],
    ];

    protected $casts = [
        'id' => 'integer',
        'title' => 'string',
        'published' => 'boolean',
        'type' => PostType::class,
        'authorId' => 'integer',
        'createdAt' => 'immutable_datetime',
        'updatedAt' => 'immutable_datetime',
    ];

    public function author()
    {
        return $this->belongsTo(User::class, 'authorId');
    }

    public function categories()
    {
        return $this->belongsToMany(
            Category::class,
            '_CategoryToPost',
            'B',
            'A'
        );
    }
}
"
`;

exports[`models: generation: Profile 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * Profile Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property string $bio
 * @property int    $userId
 * @property-read User $user
 */
abstract class Profile extends Model
{
    public $timestamps = false;
    protected $table = 'Profile';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'bio' => ['nullable', 'string'],
        'userId' => [
            Rule::unique('Profile', 'userId')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'numeric',
            'integer',
        ],
    ];

    protected $casts = [
        'id' => 'integer',
        'bio' => 'string',
        'userId' => 'integer',
    ];

    public function user()
    {
        return $this->belongsTo(User::class, 'userId');
    }
}
"
`;

exports[`models: generation: ReadOnlyField 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * ReadOnlyField Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property-read string $email
 * @property-read string $phone
 * @property string  $password
 * @property ?string $name
 */
abstract class ReadOnlyField extends Model
{
    public $timestamps = false;
    protected $table = 'ReadOnlyField';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'email' => ['nullable', 'string'],
        'phone' => ['nullable', 'string'],
        'password' => ['nullable', 'string'],
        'name' => ['required', 'string'],
    ];

    protected $casts = [
        'id' => 'integer',
        'email' => 'string',
        'phone' => 'string',
        'password' => 'string',
        'name' => 'string',
    ];
}
"
`;

exports[`models: generation: SelfRelation 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * SelfRelation Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property int $relatedId
 * @property-read null|SelfRelation $child
 * @property-read SelfRelation $parent
 */
abstract class SelfRelation extends Model
{
    public $timestamps = false;
    protected $table = 'SelfRelation';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'relatedId' => [
            Rule::unique('SelfRelation', 'relatedId')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'numeric',
            'integer',
        ],
    ];

    protected $casts = [
        'id' => 'integer',
        'relatedId' => 'integer',
    ];

    public function child()
    {
        return $this->hasOne(self::class, 'relatedId');
    }

    public function parent()
    {
        return $this->belongsTo(self::class, 'relatedId');
    }
}
"
`;

exports[`models: generation: SoftDelete1 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Database\\\\Eloquent\\\\SoftDeletes;
use Illuminate\\\\Support\\\\Carbon;

/**
 * SoftDelete1 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property string $email
 * @property string $password
 * @property Carbon $deleted_at
 */
abstract class SoftDelete1 extends Model
{
    use SoftDeletes;

    public $timestamps = false;

    protected $table = 'SoftDelete1';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'email' => ['nullable', 'string'],
        'password' => ['nullable', 'string'],
        'deleted_at' => ['nullable', 'date'],
    ];

    protected $casts = [
        'id' => 'integer',
        'email' => 'string',
        'password' => 'string',
        'deleted_at' => 'immutable_datetime',
    ];
}
"
`;

exports[`models: generation: SoftDelete2 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Database\\\\Eloquent\\\\SoftDeletes;
use Illuminate\\\\Support\\\\Carbon;

/**
 * SoftDelete2 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property string $email
 * @property string $password
 * @property Carbon $deleted_timestamp
 */
abstract class SoftDelete2 extends Model
{
    use SoftDeletes;

    public const DELETED_AT = 'deleted_timestamp';

    public $timestamps = false;

    protected $table = 'SoftDelete2';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'email' => ['nullable', 'string'],
        'password' => ['nullable', 'string'],
        'deleted_timestamp' => ['nullable', 'date'],
    ];

    protected $casts = [
        'id' => 'integer',
        'email' => 'string',
        'password' => 'string',
        'deleted_timestamp' => 'immutable_datetime',
    ];
}
"
`;

exports[`models: generation: Timestamps1 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Support\\\\Carbon;

/**
 * Timestamps1 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property Carbon $created_timestamp
 * @property Carbon $updated_timestamp
 */
abstract class Timestamps1 extends Model
{
    public const CREATED_AT = 'created_timestamp';
    public const UPDATED_AT = 'updated_timestamp';
    protected $table = 'Timestamps1';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'created_timestamp' => ['nullable', 'date'],
        'updated_timestamp' => ['nullable', 'date'],
    ];

    protected $casts = [
        'id' => 'integer',
        'created_timestamp' => 'immutable_datetime',
        'updated_timestamp' => 'immutable_datetime',
    ];
}
"
`;

exports[`models: generation: Timestamps2 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Support\\\\Carbon;

/**
 * Timestamps2 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property Carbon $created_at
 * @property Carbon $updated_timestamp
 */
abstract class Timestamps2 extends Model
{
    public const UPDATED_AT = 'updated_timestamp';
    protected $table = 'Timestamps2';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'created_at' => ['nullable', 'date'],
        'updated_timestamp' => ['nullable', 'date'],
    ];

    protected $casts = [
        'id' => 'integer',
        'created_at' => 'immutable_datetime',
        'updated_timestamp' => 'immutable_datetime',
    ];
}
"
`;

exports[`models: generation: Timestamps3 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Support\\\\Carbon;

/**
 * Timestamps3 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property Carbon $created_timestamp
 * @property Carbon $updated_at
 */
abstract class Timestamps3 extends Model
{
    public const CREATED_AT = 'created_timestamp';
    protected $table = 'Timestamps3';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'created_timestamp' => ['nullable', 'date'],
        'updated_at' => ['nullable', 'date'],
    ];

    protected $casts = [
        'id' => 'integer',
        'created_timestamp' => 'immutable_datetime',
        'updated_at' => 'immutable_datetime',
    ];
}
"
`;

exports[`models: generation: Timestamps4 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Support\\\\Carbon;

/**
 * Timestamps4 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property Carbon $created_at
 * @property Carbon $updated_at
 */
abstract class Timestamps4 extends Model
{
    protected $table = 'Timestamps4';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'created_at' => ['nullable', 'date'],
        'updated_at' => ['nullable', 'date'],
    ];

    protected $casts = [
        'id' => 'integer',
        'created_at' => 'immutable_datetime',
        'updated_at' => 'immutable_datetime',
    ];
}
"
`;

exports[`models: generation: Timestamps5 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Support\\\\Carbon;

/**
 * Timestamps5 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property Carbon $created_at
 * @property Carbon $updated_at
 */
abstract class Timestamps5 extends Model
{
    protected $table = 'Timestamps5';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'created_at' => ['nullable', 'date'],
        'updated_at' => ['nullable', 'date'],
    ];

    protected $casts = [
        'id' => 'integer',
        'created_at' => 'immutable_datetime',
        'updated_at' => 'immutable_datetime',
    ];
}
"
`;

exports[`models: generation: Timestamps6 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Support\\\\Carbon;

/**
 * Timestamps6 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property Carbon $created_at
 * @property Carbon $updated_timestamp
 */
abstract class Timestamps6 extends Model
{
    public const UPDATED_AT = 'updated_timestamp';
    protected $table = 'Timestamps6';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'created_at' => ['nullable', 'date'],
        'updated_timestamp' => ['nullable', 'date'],
    ];

    protected $casts = [
        'id' => 'integer',
        'created_at' => 'immutable_datetime',
        'updated_timestamp' => 'immutable_datetime',
    ];
}
"
`;

exports[`models: generation: Timestamps7 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Support\\\\Carbon;

/**
 * Timestamps7 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property Carbon $created_at
 * @property Carbon $updated_at
 */
abstract class Timestamps7 extends Model
{
    protected $table = 'Timestamps7';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'created_at' => ['nullable', 'date'],
        'updated_at' => ['nullable', 'date'],
    ];

    protected $casts = [
        'id' => 'integer',
        'created_at' => 'immutable_datetime',
        'updated_at' => 'immutable_datetime',
    ];
}
"
`;

exports[`models: generation: Timestamps8 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Support\\\\Carbon;

/**
 * Timestamps8 Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property Carbon $created_at
 * @property Carbon $updated_timestamp
 */
abstract class Timestamps8 extends Model
{
    public const UPDATED_AT = 'updated_timestamp';
    protected $table = 'Timestamps8';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'created_at' => ['nullable', 'date'],
        'updated_timestamp' => ['nullable', 'date'],
    ];

    protected $casts = [
        'id' => 'integer',
        'created_at' => 'immutable_datetime',
        'updated_timestamp' => 'immutable_datetime',
    ];
}
"
`;

exports[`models: generation: TouchingA 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * TouchingA Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property-read null|TouchingB $related
 */
abstract class TouchingA extends Model
{
    public $timestamps = false;
    protected $table = 'TouchingA';

    protected $touches = ['related'];

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
    ];

    public function related()
    {
        return $this->hasOne(TouchingB::class, 'relatedId');
    }
}
"
`;

exports[`models: generation: TouchingB 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * TouchingB Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property int $relatedId
 * @property-read TouchingA $related
 */
abstract class TouchingB extends Model
{
    public $timestamps = false;
    protected $table = 'TouchingB';

    protected $touches = ['related'];

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'relatedId' => [
            Rule::unique('TouchingB', 'relatedId')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'numeric',
            'integer',
        ],
    ];

    protected $casts = [
        'id' => 'integer',
        'relatedId' => 'integer',
    ];

    public function related()
    {
        return $this->belongsTo(TouchingA::class, 'relatedId');
    }
}
"
`;

exports[`models: generation: Types 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Support\\\\Carbon;

/**
 * Types Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property string $name
 * @property bool   $active
 * @property int    $age
 * @property int    $seconds
 * @property int    $blob
 * @property float  $speed
 * @property string $price
 * @property Carbon $birth
 * @property array  $schema
 */
abstract class Types extends Model
{
    public $timestamps = false;
    protected $table = 'Types';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'name' => ['nullable', 'string'],
        'active' => ['nullable', 'boolean'],
        'age' => ['nullable', 'numeric', 'integer'],
        'seconds' => ['nullable', 'numeric', 'integer'],
        'blob' => ['nullable', 'numeric', 'integer'],
        'speed' => ['nullable', 'numeric'],
        'price' => ['nullable', 'numeric'],
        'birth' => ['nullable', 'date'],
        'schema' => ['nullable', 'json'],
    ];

    protected $casts = [
        'id' => 'integer',
        'name' => 'string',
        'active' => 'boolean',
        'age' => 'integer',
        'seconds' => 'integer',
        'blob' => 'integer',
        'speed' => 'double',
        'price' => 'string',
        'birth' => 'immutable_datetime',
        'schema' => 'array',
    ];
}
"
`;

exports[`models: generation: Unique 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;

/**
 * Unique Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property string  $email
 * @property string  $username
 * @property ?string $name
 */
abstract class Unique extends Model
{
    public $timestamps = false;
    protected $table = 'Unique';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'email' => [
            Rule::unique('Unique', 'email')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'string',
        ],
        'username' => [
            Rule::unique('Unique', 'username')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'string',
        ],
        'name' => ['required', 'string'],
    ];

    protected $casts = [
        'id' => 'integer',
        'email' => 'string',
        'username' => 'string',
        'name' => 'string',
    ];
}
"
`;

exports[`models: generation: UnsupportedTypes 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * UnsupportedTypes Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 */
abstract class UnsupportedTypes extends Model
{
    public $incrementing = false;

    public $timestamps = false;
    protected $table = 'UnsupportedTypes';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'circle' => ['required'],
        'square' => ['nullable'],
        'triangle' => ['nullable'],
        'rectangle' => ['array', 'required'],
    ];

    protected $casts = [
        'id' => 'integer',
        'rectangle' => 'array',
    ];
}
"
`;

exports[`models: generation: User 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use App\\\\Enums\\\\Prisma\\\\Role;
use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Collection;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rule;
use Illuminate\\\\Validation\\\\Rules\\\\Enum;

/**
 * User Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property string  $email
 * @property ?string $name
 * @property Role    $role
 * @property-read null|Profile $profile
 * @property-read Collection<Post> $posts
 */
abstract class User extends Model
{
    public $timestamps = false;
    protected $table = 'User';

    protected $attributes = [
        'role' => Role::USER,
    ];

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'email' => [
            Rule::unique('User', 'email')->ignore(
                $this->getKey(),
                $this->getKeyName()
            ),
            'nullable',
            'string',
        ],
        'name' => ['required', 'string'],
        'role' => ['nullable', new Enum(Role::class)],
    ];

    protected $casts = [
        'id' => 'integer',
        'email' => 'string',
        'name' => 'string',
        'role' => Role::class,
    ];

    public function profile()
    {
        return $this->hasOne(Profile::class, 'userId');
    }

    public function posts()
    {
        return $this->hasMany(Post::class, 'authorId');
    }
}
"
`;

exports[`models: generation: Visible 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * Visible Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property string  $email
 * @property string  $password
 * @property string  $api_key
 * @property ?string $name
 */
abstract class Visible extends Model
{
    public $timestamps = false;
    protected $table = 'Visible';

    protected $visible = ['email', 'name'];

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'email' => ['nullable', 'string'],
        'password' => ['nullable', 'string'],
        'api_key' => ['nullable', 'string'],
        'name' => ['required', 'string'],
    ];

    protected $casts = [
        'id' => 'integer',
        'email' => 'string',
        'password' => 'string',
        'api_key' => 'string',
        'name' => 'string',
    ];
}
"
`;

exports[`models: generation: WithArray 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * WithArray Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property int[] $numbers
 */
abstract class WithArray extends Model
{
    public $timestamps = false;
    protected $table = 'WithArray';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'numbers' => ['array', 'required'],
    ];

    protected $casts = [
        'id' => 'integer',
        'numbers' => 'array',
    ];
}
"
`;

exports[`models: generation: WithBackedEnum 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use App\\\\Enums\\\\Prisma\\\\BackedEnum;
use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rules\\\\Enum;

/**
 * WithBackedEnum Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property BackedEnum   $enum
 * @property ?BackedEnum  $nullable
 * @property BackedEnum[] $array
 * @property BackedEnum   $defaultEnum
 */
abstract class WithBackedEnum extends Model
{
    public $timestamps = false;
    protected $table = 'WithBackedEnum';

    protected $attributes = [
        'defaultEnum' => BackedEnum::A,
    ];

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'enum' => ['nullable', new Enum(BackedEnum::class)],
        'nullable' => ['required', new Enum(BackedEnum::class)],
        'array' => ['array', 'required'],
        'defaultEnum' => ['nullable', new Enum(BackedEnum::class)],
    ];

    protected $casts = [
        'id' => 'integer',
        'enum' => BackedEnum::class,
        'nullable' => BackedEnum::class,
        'array' => 'array',
        'defaultEnum' => BackedEnum::class,
    ];
}
"
`;

exports[`models: generation: WithDbType 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * WithDbType Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property string $email
 */
abstract class WithDbType extends Model
{
    public $timestamps = false;
    protected $table = 'WithDbType';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'email' => ['nullable', 'string'],
    ];

    protected $casts = [
        'id' => 'integer',
        'email' => 'string',
    ];
}
"
`;

exports[`models: generation: WithEnum 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use App\\\\Enums\\\\Prisma\\\\Enum;
use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;
use Illuminate\\\\Validation\\\\Rules\\\\Enum;

/**
 * WithEnum Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 * @property Enum   $enum
 * @property ?Enum  $nullable
 * @property Enum[] $array
 * @property Enum   $defaultEnum
 */
abstract class WithEnum extends Model
{
    public $timestamps = false;
    protected $table = 'WithEnum';

    protected $attributes = [
        'defaultEnum' => Enum::A,
    ];

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
        'enum' => ['nullable', new Enum(Enum::class)],
        'nullable' => ['required', new Enum(Enum::class)],
        'array' => ['array', 'required'],
        'defaultEnum' => ['nullable', new Enum(Enum::class)],
    ];

    protected $casts = [
        'id' => 'integer',
        'enum' => Enum::class,
        'nullable' => Enum::class,
        'array' => 'array',
        'defaultEnum' => Enum::class,
    ];
}
"
`;

exports[`models: generation: WithGlobalPrimaryKey 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * WithGlobalPrimaryKey Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 */
abstract class WithGlobalPrimaryKey extends Model
{
    public $timestamps = false;
    protected $table = 'WithGlobalPrimaryKey';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
    ];
}
"
`;

exports[`models: generation: WithGlobalPrimaryKeyDifferentName 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * WithGlobalPrimaryKeyDifferentName Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $primary_id
 */
abstract class WithGlobalPrimaryKeyDifferentName extends Model
{
    public $timestamps = false;
    protected $table = 'WithGlobalPrimaryKeyDifferentName';

    protected $primaryKey = 'primary_id';

    protected $rules = [
        'primary_id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'primary_id' => 'integer',
    ];
}
"
`;

exports[`models: generation: WithGlobalStringPrimaryKey 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * WithGlobalStringPrimaryKey Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read string $id
 */
abstract class WithGlobalStringPrimaryKey extends Model
{
    public $incrementing = false;

    public $timestamps = false;
    protected $table = 'WithGlobalStringPrimaryKey';

    protected $keyType = 'string';

    protected $rules = [
        'id' => ['nullable', 'string'],
    ];

    protected $casts = [
        'id' => 'string',
    ];
}
"
`;

exports[`models: generation: WithGlobalStringPrimaryKeyDifferentName 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * WithGlobalStringPrimaryKeyDifferentName Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read string $primary_id
 */
abstract class WithGlobalStringPrimaryKeyDifferentName extends Model
{
    public $incrementing = false;

    public $timestamps = false;
    protected $table = 'WithGlobalStringPrimaryKeyDifferentName';

    protected $primaryKey = 'primary_id';

    protected $keyType = 'string';

    protected $rules = [
        'primary_id' => ['nullable', 'string'],
    ];

    protected $casts = [
        'primary_id' => 'string',
    ];
}
"
`;

exports[`models: generation: WithPrimaryKey 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * WithPrimaryKey Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 */
abstract class WithPrimaryKey extends Model
{
    public $timestamps = false;
    protected $table = 'WithPrimaryKey';

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
    ];
}
"
`;

exports[`models: generation: WithPrimaryKeyDifferentName 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * WithPrimaryKeyDifferentName Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $primary_id
 */
abstract class WithPrimaryKeyDifferentName extends Model
{
    public $timestamps = false;
    protected $table = 'WithPrimaryKeyDifferentName';

    protected $primaryKey = 'primary_id';

    protected $rules = [
        'primary_id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'primary_id' => 'integer',
    ];
}
"
`;

exports[`models: generation: WithStringPrimaryKey 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * WithStringPrimaryKey Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read string $id
 */
abstract class WithStringPrimaryKey extends Model
{
    public $incrementing = false;

    public $timestamps = false;
    protected $table = 'WithStringPrimaryKey';

    protected $keyType = 'string';

    protected $rules = [
        'id' => ['nullable', 'string'],
    ];

    protected $casts = [
        'id' => 'string',
    ];
}
"
`;

exports[`models: generation: WithStringPrimaryKeyDifferentName 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * WithStringPrimaryKeyDifferentName Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read string $primary_id
 */
abstract class WithStringPrimaryKeyDifferentName extends Model
{
    public $incrementing = false;

    public $timestamps = false;
    protected $table = 'WithStringPrimaryKeyDifferentName';

    protected $primaryKey = 'primary_id';

    protected $keyType = 'string';

    protected $rules = [
        'primary_id' => ['nullable', 'string'],
    ];

    protected $casts = [
        'primary_id' => 'string',
    ];
}
"
`;

exports[`models: generation: WithTableMap 1`] = `
"<?php

namespace App\\\\Models\\\\Prisma;

use Closure;
use Illuminate\\\\Database\\\\Eloquent\\\\Builder;
use Illuminate\\\\Database\\\\Eloquent\\\\Model;

/**
 * WithTableMap Model.
 *
 * @mixin Builder
 *
 * @method static      Builder|static query()
 * @method static      static make(array $attributes = [])
 * @method static      static create(array $attributes = [])
 * @method static      static forceCreate(array $attributes)
 * @method static      firstOrNew(array $attributes = [], array $values = [])
 * @method static      firstOrFail($columns = ['*'])
 * @method static      firstOrCreate(array $attributes, array $values = [])
 * @method static      firstOr($columns = ['*'], Closure $callback = null)
 * @method static      firstWhere($column, $operator = null, $value = null, $boolean = 'and')
 * @method static      updateOrCreate(array $attributes, array $values = [])
 * @method null|static first($columns = ['*'])
 * @method static      static findOrFail($id, $columns = ['*'])
 * @method static      static findOrNew($id, $columns = ['*'])
 * @method static      null|static find($id, $columns = ['*'])
 *
 * @property-read int $id
 */
abstract class WithTableMap extends Model
{
    public $timestamps = false;

    protected $rules = [
        'id' => ['nullable', 'numeric', 'integer'],
    ];

    protected $casts = [
        'id' => 'integer',
    ];
}
"
`;
